console.log("Server is starting...");

require("dotenv").config();
const express = require("express");
const mysql = require("mysql2/promise");
const bcrypt = require("bcrypt");
const jwt = require("jsonwebtoken"); // üî• ADD: ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏™‡∏£‡πâ‡∏≤‡∏á Token ‡∏à‡∏£‡∏¥‡∏á

const app = express();

// ---------- Config ----------
const port = process.env.PORT || 8000;
const dbConfig = {
  host: process.env.DB_HOST || "localhost",
  port: process.env.DB_PORT ? Number(process.env.DB_PORT) : 3306,
  user: process.env.DB_USER || "root",
  password: process.env.DB_PASS || "",
  database: process.env.DB_NAME || "demo_app",
  waitForConnections: true,
  connectionLimit: 10,
  queueLimit: 0,
};

// ---------- Middlewares ----------
app.use(express.json());
app.use(express.urlencoded({ extended: true }));

// simple logger
app.use((req, res, next) => {
  console.log(`${req.method} ${req.url}`);
  next();
});

// ---------- DB Pool ----------
// (‡πÅ‡∏ó‡∏ô‡∏ó‡∏µ‡πà‡∏ö‡∏•‡πá‡∏≠‡∏Å IIFE ‡πÄ‡∏î‡∏¥‡∏°‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î‡∏î‡πâ‡∏ß‡∏¢‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô init() ‡∏ô‡∏µ‡πâ)
let pool;
async function init() {
  try {
    pool = await mysql.createPool(dbConfig);
    const conn = await pool.getConnection();
    await conn.ping();
    conn.release();
    console.log("‚úÖ Connected to MySQL (XAMPP) successfully.");

    // ---------- Start server ‡∏´‡∏•‡∏±‡∏á DB ‡∏û‡∏£‡πâ‡∏≠‡∏° ----------
    app.listen(port, () => {
      console.log(`Server is running at http://localhost:${port}`);
    });
  } catch (err) {
    console.error("‚ùå MySQL connection error:", err.message);
    process.exit(1);
  }
}
init();

// ---------- Routes ----------
app.get("", (req, res) => {
  res.send("Hello World!");
});

// ‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ‡πÉ‡∏´‡∏°‡πà -> ‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡∏•‡∏á MySQL (‡∏£‡∏≠‡∏á‡∏£‡∏±‡∏ö user / Entrepreneur)
app.post("/registers", async (req, res) => {
  try {
    const { username, email, password, role, usertype } = req.body || {};

    if (!username || !email || !password) {
      return res
        .status(400)
        .json({ message: "username, email, password ‡πÄ‡∏õ‡πá‡∏ô‡∏ü‡∏¥‡∏•‡∏î‡πå‡∏ö‡∏±‡∏á‡∏Ñ‡∏±‡∏ö" });
    }

    const passwordHash = await bcrypt.hash(password, 10);

    // ‡∏£‡∏±‡∏ö‡πÑ‡∏î‡πâ‡∏ó‡∏±‡πâ‡∏á role/usertype ‡∏à‡∏≤‡∏Å‡∏ü‡∏£‡∏≠‡∏ô‡∏ï‡πå ‡πÅ‡∏•‡∏∞‡πÅ‡∏°‡∏õ‡πÄ‡∏õ‡πá‡∏ô "user" ‡∏´‡∏£‡∏∑‡∏≠ "Entrepreneur"
    const raw = (role ?? usertype ?? "user");
    const r = String(raw).trim().toLowerCase();
    const finalUsertype = r === "entrepreneur" ? "Entrepreneur" : "user";

    const sql = `
      INSERT INTO users (username, email, password_hash, usertype)
      VALUES (?, ?, ?, ?)
    `;
    const params = [username, email, passwordHash, finalUsertype];

    const [result] = await pool.execute(sql, params);

    return res.status(201).json({
      message: "User created successfully",
      user: {
        id: result.insertId,
        username,
        email,
        usertype: finalUsertype,
      },
    });
  } catch (err) {
    if (err && err.code === "ER_DUP_ENTRY") {
      return res.status(409).json({ message: "‡∏≠‡∏µ‡πÄ‡∏°‡∏•‡∏ô‡∏µ‡πâ‡∏ñ‡∏π‡∏Å‡πÉ‡∏ä‡πâ‡πÑ‡∏õ‡πÅ‡∏•‡πâ‡∏ß" });
    }
    console.error("Register error:", err);
    return res.status(500).json({ message: "Internal Server Error" });
  }
});



app.post("/users/login", async (req, res) => {
  try {
    const { username, email, password } = req.body || {};
    // ‡∏£‡∏±‡∏ö‡πÑ‡∏î‡πâ‡∏ó‡∏±‡πâ‡∏á username ‡∏´‡∏£‡∏∑‡∏≠ email ‡πÅ‡∏ï‡πà‡∏ï‡πâ‡∏≠‡∏á‡∏°‡∏µ password ‡πÄ‡∏™‡∏°‡∏≠
    const loginId = (username || email || "").trim();

    if (!loginId || !password) {
      return res.status(400).json({ message: "‡∏Å‡∏£‡∏≠‡∏Å username/email ‡πÅ‡∏•‡∏∞ password ‡πÉ‡∏´‡πâ‡∏Ñ‡∏£‡∏ö" });
    }

    // ‡∏´‡∏≤ user ‡∏à‡∏≤‡∏Å DB
    const [rows] = await pool.query(
      "SELECT id, username, email, password_hash, usertype FROM users WHERE username = ? OR email = ? LIMIT 1",
      [loginId, loginId]
    );
    if (!Array.isArray(rows) || rows.length === 0) {
      return res.status(401).json({ message: "‡∏ä‡∏∑‡πà‡∏≠‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ‡∏´‡∏£‡∏∑‡∏≠‡∏£‡∏´‡∏±‡∏™‡∏ú‡πà‡∏≤‡∏ô‡πÑ‡∏°‡πà‡∏ñ‡∏π‡∏Å‡∏ï‡πâ‡∏≠‡∏á" });
    }

    const u = rows[0];

    // ‡∏ï‡∏£‡∏ß‡∏à‡∏£‡∏´‡∏±‡∏™‡∏ú‡πà‡∏≤‡∏ô
    const ok = await bcrypt.compare(password, u.password_hash);
    if (!ok) {
      return res.status(401).json({ message: "‡∏ä‡∏∑‡πà‡∏≠‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ‡∏´‡∏£‡∏∑‡∏≠‡∏£‡∏´‡∏±‡∏™‡∏ú‡πà‡∏≤‡∏ô‡πÑ‡∏°‡πà‡∏ñ‡∏π‡∏Å‡∏ï‡πâ‡∏≠‡∏á" });
    }

    // Normalize ‡∏ö‡∏ó‡∏ö‡∏≤‡∏ó -> 'entrepreneur' | 'user'
    const role = String(u.usertype || "").trim().toLowerCase() === "entrepreneur"
      ? "entrepreneur"
      : "user";

    // ‡∏™‡∏£‡πâ‡∏≤‡∏á JWT ‡πÅ‡∏•‡πâ‡∏ß‡πÄ‡∏ã‡πá‡∏ï‡πÄ‡∏õ‡πá‡∏ô httpOnly cookie (‡πÄ‡∏´‡∏°‡∏≤‡∏∞‡∏Å‡∏±‡∏ö‡πÄ‡∏ã‡∏™‡∏ä‡∏±‡∏ô)
    const token = jwt.sign(
      { sub: u.id, username: u.username, role },
      process.env.JWT_SECRET || "dev-secret-change-me",
      { expiresIn: "7d" }
    );

    res.cookie("session_token", token, {
      httpOnly: true,
      sameSite: "lax",
      path: "/",
      // secure: true,  // ‡πÄ‡∏õ‡∏¥‡∏î‡πÄ‡∏°‡∏∑‡πà‡∏≠‡∏•‡∏á HTTPS
      maxAge: 7 * 24 * 60 * 60 * 1000,
    });

    // ‡∏™‡πà‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ó‡∏µ‡πà‡∏ü‡∏£‡∏≠‡∏ô‡∏ï‡πå‡πÉ‡∏ä‡πâ map ‡∏ö‡∏ó‡∏ö‡∏≤‡∏ó‡πÑ‡∏î‡πâ
    return res.json({
      success: true,
      user: {
        id: u.id,
        username: u.username,
        email: u.email,
        usertype: role,
        role, // ‡πÄ‡∏ú‡∏∑‡πà‡∏≠‡∏ü‡∏£‡∏≠‡∏ô‡∏ï‡πå‡∏≠‡πà‡∏≤‡∏ô‡∏Ñ‡πà‡∏≤ role ‡∏ï‡∏£‡∏á ‡πÜ
      },
      token, // ‡∏à‡∏∞‡πÑ‡∏°‡πà‡πÉ‡∏ä‡πâ‡∏Å‡πá‡πÑ‡∏î‡πâ ‡πÄ‡∏û‡∏£‡∏≤‡∏∞‡πÄ‡∏£‡∏≤‡πÄ‡∏ã‡πá‡∏ï‡∏Ñ‡∏∏‡∏Å‡∏Å‡∏µ‡πâ‡πÅ‡∏•‡πâ‡∏ß
    });
  } catch (err) {
    console.error("Login error:", err);
    return res.status(500).json({ message: "Internal Server Error" });
  }
});

app.delete("/users/:id", async (req, res) => {
  try {
    const id = Number(req.params.id);
    if (!Number.isInteger(id) || id <= 0) {
      return res.status(400).json({ message: "invalid user id" });
    }

    // ‡∏î‡∏∂‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏Å‡πà‡∏≠‡∏ô‡∏•‡∏ö (‡πÑ‡∏°‡πà‡∏≠‡πâ‡∏≤‡∏á created_at/updated_at ‡∏ñ‡πâ‡∏≤‡πÑ‡∏°‡πà‡∏°‡∏µ‡∏Ñ‡∏≠‡∏•‡∏±‡∏°‡∏ô‡πå)
    const [rows] = await pool.query(
      `SELECT id, username, email, usertype
       FROM users WHERE id = ? LIMIT 1`,
      [id]
    );

    if (!Array.isArray(rows) || rows.length === 0) {
      return res.status(404).json({ message: "User not found" });
    }

    const deletedUser = rows[0];

    const [result] = await pool.execute("DELETE FROM users WHERE id = ?", [id]);
    if (result.affectedRows === 0) {
      return res.status(404).json({ message: "User not found" });
    }

    return res.json({
      message: "User deleted successfully",
      deleted: {
        id: deletedUser.id,
        username: deletedUser.username,
        email: deletedUser.email,
        usertype: deletedUser.usertype,
        role:
          String(deletedUser.usertype || "").toLowerCase() === "entrepreneur"
            ? "entrepreneur"
            : "user",
      },
    });
  } catch (err) {
    logSqlError("Delete user error", err);
    return res.status(500).json({ message: "Internal Server Error" });
  }
});

// GET /users ‚Äî ‡∏î‡∏∂‡∏á‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î
app.get("/users", async (req, res) => {
  try {
    const [rows] = await pool.query(
      "SELECT id, username, email, usertype FROM users ORDER BY id DESC"
    );

    // ‡πÅ‡∏õ‡∏•‡∏á usertype ‡πÉ‡∏ô DB -> role (lowercase) ‡πÉ‡∏´‡πâ‡∏ü‡∏£‡∏≠‡∏ô‡∏ï‡πå‡πÉ‡∏ä‡πâ‡∏á‡πà‡∏≤‡∏¢ (‡∏ñ‡πâ‡∏≤‡πÑ‡∏°‡πà‡∏ï‡πâ‡∏≠‡∏á‡∏Å‡∏≤‡∏£ ‡∏•‡∏ö map ‡∏≠‡∏≠‡∏Å‡πÑ‡∏î‡πâ)
    const users = rows.map((u) => ({
      id: u.id,
      username: u.username,
      email: u.email,
      usertype: u.usertype, // ‡πÄ‡∏Å‡πá‡∏ö‡πÉ‡∏ô DB: "user" ‡∏´‡∏£‡∏∑‡∏≠ "Entrepreneur"
      role: String(u.usertype || "").toLowerCase() === "entrepreneur" ? "entrepreneur" : "user",
    }));

    return res.json(users);
  } catch (err) {
    console.error("List users error:", err);
    return res.status(500).json({ message: "Internal Server Error" });
  }
});

// ‚úÖ PATCH /users/:id ‚Äî ‡∏õ‡∏•‡∏≠‡∏î‡∏†‡∏±‡∏¢ ‡πÑ‡∏°‡πà‡πÅ‡∏ï‡∏∞ updated_at, ‡∏Å‡∏±‡∏ô‡∏Ñ‡∏µ‡∏¢‡πå‡∏ã‡πâ‡∏≥, log ‡∏ä‡∏±‡∏î
app.patch("/users/:id", async (req, res) => {
  try {
    // --- ‡∏ï‡∏£‡∏ß‡∏à id ---
    const id = Number(req.params.id);
    if (!Number.isInteger(id) || id <= 0) {
      return res.status(400).json({ message: "invalid user id" });
    }

    // --- ‡∏î‡∏∂‡∏á‡∏ü‡∏¥‡∏•‡∏î‡πå‡∏à‡∏≤‡∏Å body ---
    const { username, email, password, role, usertype } = req.body || {};

    // --- ‡∏õ‡∏£‡∏∞‡∏Å‡∏≠‡∏ö SQL ‡πÅ‡∏ö‡∏ö‡πÑ‡∏î‡∏ô‡∏≤‡∏°‡∏¥‡∏Å ---
    const sets = [];
    const params = [];

    if (username !== undefined) {
      const v = String(username).trim();
      if (!v) return res.status(400).json({ message: "username ‡∏´‡πâ‡∏≤‡∏°‡∏ß‡πà‡∏≤‡∏á" });
      sets.push("username = ?");
      params.push(v);
    }

    if (email !== undefined) {
      const v = String(email).trim();
      if (!v) return res.status(400).json({ message: "email ‡∏´‡πâ‡∏≤‡∏°‡∏ß‡πà‡∏≤‡∏á" });
      sets.push("email = ?");
      params.push(v);
    }

    if (password !== undefined) {
      const v = String(password);
      if (v.length < 6) {
        return res.status(400).json({ message: "password ‡∏ï‡πâ‡∏≠‡∏á‡∏≠‡∏¢‡πà‡∏≤‡∏á‡∏ô‡πâ‡∏≠‡∏¢ 6 ‡∏ï‡∏±‡∏ß‡∏≠‡∏±‡∏Å‡∏©‡∏£" });
      }
      const hash = await bcrypt.hash(v, 10);
      sets.push("password_hash = ?");
      params.push(hash);
    }

    // ‡∏£‡∏±‡∏ö role/usertype (normalize ‚Üí DB ‡πÄ‡∏Å‡πá‡∏ö "user" | "Entrepreneur")
    const normalizeRole = (raw) => {
      const r = String(raw ?? "").trim().toLowerCase();
      if (r === "entrepreneur") return "Entrepreneur";
      if (r === "user") return "user";
      return null;
    };
    if (role !== undefined || usertype !== undefined) {
      const finalRole = normalizeRole(role ?? usertype);
      if (!finalRole) {
        return res.status(400).json({ message: "role/usertype ‡πÑ‡∏°‡πà‡∏ñ‡∏π‡∏Å‡∏ï‡πâ‡∏≠‡∏á (user | entrepreneur)" });
      }
      sets.push("usertype = ?");
      params.push(finalRole);
    }

    if (sets.length === 0) {
      return res.status(400).json({ message: "‡πÑ‡∏°‡πà‡∏°‡∏µ‡∏ü‡∏¥‡∏•‡∏î‡πå‡πÉ‡∏´‡πâ‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï" });
    }

    // --- ‡∏£‡∏±‡∏ô UPDATE ---
    const sql = `UPDATE users SET ${sets.join(", ")} WHERE id = ?`;
    params.push(id);
    const [result] = await pool.execute(sql, params);

    if (result.affectedRows === 0) {
      return res.status(404).json({ message: "User not found" });
    }

    // --- ‡∏≠‡πà‡∏≤‡∏ô‡∏Ñ‡πà‡∏≤‡∏ó‡∏µ‡πà‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï‡πÅ‡∏•‡πâ‡∏ß‡∏Å‡∏•‡∏±‡∏ö‡πÑ‡∏õ (‡πÑ‡∏°‡πà‡πÅ‡∏ï‡∏∞ created_at/updated_at) ---
    const [rows] = await pool.query(
      `SELECT id, username, email, usertype FROM users WHERE id = ? LIMIT 1`,
      [id]
    );
    const u = rows[0];

    return res.json({
      message: "User updated",
      user: {
        id: u.id,
        username: u.username,
        email: u.email,
        usertype: u.usertype,
        role: String(u.usertype || "").toLowerCase() === "entrepreneur" ? "entrepreneur" : "user",
      },
    });
  } catch (err) {
    // üîé log ‡∏£‡∏≤‡∏¢‡∏•‡∏∞‡πÄ‡∏≠‡∏µ‡∏¢‡∏î‡πÄ‡∏û‡∏∑‡πà‡∏≠‡πÅ‡∏Å‡πâ‡πÑ‡∏î‡πâ‡πÑ‡∏ß
    console.error("PATCH /users/:id error:", {
      name: err?.name,
      code: err?.code,
      errno: err?.errno,
      sqlState: err?.sqlState,
      sqlMessage: err?.sqlMessage,
      message: err?.message,
      stack: err?.stack,
    });

    // ‡∏à‡∏±‡∏ö‡πÄ‡∏Ñ‡∏™‡∏≠‡∏µ‡πÄ‡∏°‡∏•‡∏ã‡πâ‡∏≥ (unique constraint)
    if (err && err.code === "ER_DUP_ENTRY") {
      return res.status(409).json({ message: "‡∏≠‡∏µ‡πÄ‡∏°‡∏•‡∏ô‡∏µ‡πâ‡∏ñ‡∏π‡∏Å‡πÉ‡∏ä‡πâ‡πÑ‡∏õ‡πÅ‡∏•‡πâ‡∏ß" });
    }

    return res.status(500).json({ message: "Internal Server Error" });
  }
});



// ---------- Start server ----------
app.listen(port, () => {
  console.log(`Server is running at http://localhost:${port}`);
});
